#
# Build for the Sandbox CI AKS Cluster
#
name: HMCTSDEMO AKS Pipeline
trigger: none
variables:
  environment: 'hmctsdemo'
  aksResourceGroup: 'k8-${environment}'
  aksClusterName: 'k8-cluster-${environment}'
  keyvaultName: 'k8-vault-${environment}'
  serviceConnection: 'azurerm-${environment}'
  aksParametersFile: '${environment}.json'

jobs:
- job: Keyvault
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      keyvaultName: $(keyvaultName)

- job: DeployAKS
  dependsOn: Keyvault
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    aksServicePrincipalId: $[dependencies.Keyvault.outputs['exportKeyvault.aksServicePrincipalId']]
    aksServicePrincipalSecret: $[dependencies.Keyvault.outputs['exportKeyvault.aksServicePrincipalSecret']]
  steps:
- template: ../tasks/k8-deploy.yaml
- template: ../tasks/helm-install.yaml
  parameters:
    serviceConnection: $(serviceConnection)
    aksResourceGroup: $(aksResourceGroup)
    aksClusterName: $(aksClusterName)
    aksParametersFile: $(aksParametersFile)

- job: InstallKured
  dependsOn: DeployAKS
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/helm-configure.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
  - template: ../tasks/kured-install.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
